import re
from phonemizer.backend import EspeakBackend
from phonemizer.phonemize import phonemize
from phonemizer.separator import Separator
import json

KANA_VOWEL_MAP = {
    'ｱ': 'a', 'ｲ': 'i', 'ｳ': 'u', 'ｴ': 'e', 'ｵ': 'o',"ｱｰ":'ɚ'
}

VOWELS = {
    'æ': 'ｱ', 'a': 'ｱ', 'ə': 'ｱ', 'ʌ': 'ｱ', 'e': 'ｴ', 'ɛ': 'ｴ',
    'i': 'ｲ', 'ɪ': 'ｲ', 'o': 'ｵ', 'ɔ': 'ｵ', 'u': 'ｳ', 'ʊ': 'ｳ',
    'ɚ': 'ｱー', 'ɝ': 'ｱー'
}
CONSONANTS = {
    'b': 'ﾌﾞ', 'd': 'ﾄﾞ', 'f': 'ﾌ', 'ɡ': 'ｸﾞ', 'h': 'ﾊ', 'k': 'ｸ',
    'l': 'ﾙ', 'm': 'ﾑ', 'n': 'ﾝ', 'p': 'ﾌﾟ', 's': 'ｽ', 't': 'ﾄ',
    'v': 'ｳﾞ', 'w': 'ｳ', 'j': 'ｲ', 'z': 'ｽﾞ', 'ʃ': 'ｼｭ', 'θ': 'ｽ',
    'ð': 'ｽﾞ', 'ŋ': 'ﾝ', 'ɹ': 'ﾙ', 'tʃ': 'ﾁ', 'dʒ': 'ｼﾞ', 'ʒ': 'ｼﾞｭ',"ɜː":"ｱｰ"
}
COMBINATIONS = {
    'b': {'æ':'ﾊﾞ', 'a':'ﾊﾞ', 'ə':'ﾊﾞ', 'ʌ':'ﾊﾞ', 'e':'ﾍﾞ', 'ɛ':'ﾍﾞ', 'i':'ﾋﾞ', 'ɪ':'ﾋﾞ', 'o':'ﾎﾞ', 'ɔ':'ﾎﾞ', 'u':'ﾌﾞ', 'ʊ':'ﾌﾞ', 'ɚ':'ﾊﾞｰ', 'ɝ':'ﾊﾞｰ', 'aɪ':'ﾊﾞｲ', 'aʊ':'ﾊﾞｳ', 'eɪ':'ﾍﾞｲ', 'oʊ':'ﾎﾞｳ', 'ɔɪ':'ﾎﾞｲ'},
    'd': {'æ':'ﾀﾞ', 'a':'ﾀﾞ', 'ə':'ﾀﾞ', 'ʌ':'ﾀﾞ', 'e':'ﾃﾞ', 'ɛ':'ﾃﾞ', 'i':'ﾃﾞｨ', 'ɪ':'ﾃﾞｨ', 'o':'ﾄﾞ', 'ɔ':'ﾄﾞ', 'u':'ﾄﾞｩ', 'ʊ':'ﾄﾞｩ', 'ɚ':'ﾀﾞｰ', 'ɝ':'ﾀﾞｰ', 'aɪ':'ﾀﾞｲ', 'aʊ':'ﾀﾞｳ', 'eɪ':'ﾃﾞｲ', 'oʊ':'ﾄﾞｳ', 'ɔɪ':'ﾄﾞｲ'},
    'f': {'æ':'ﾌｧ', 'a':'ﾌｧ', 'ə':'ﾌｧ', 'ʌ':'ﾌｧ', 'e':'ﾌｪ', 'ɛ':'ﾌｪ', 'i':'ﾌｨ', 'ɪ':'ﾌｨ', 'o':'ﾌｫ', 'ɔ':'ﾌｫ', 'u':'ﾌ', 'ʊ':'ﾌ', 'ɚ':'ﾌｧｰ', 'ɝ':'ﾌｧｰ', 'aɪ':'ﾌｧｲ', 'aʊ':'ﾌｧｳ', 'eɪ':'ﾌｪｲ', 'oʊ':'ﾌｫｳ', 'ɔɪ':'ﾌｫｲ'},
    'ɡ': {'æ':'ｶﾞ', 'a':'ｶﾞ', 'ə':'ｶﾞ', 'ʌ':'ｶﾞ', 'e':'ｹﾞ', 'ɛ':'ｹﾞ', 'i':'ｷﾞ', 'ɪ':'ｷﾞ', 'o':'ｺﾞ', 'ɔ':'ｺﾞ', 'u':'ｸﾞ', 'ʊ':'ｸﾞ', 'ɚ':'ｶﾞｰ', 'ɝ':'ｶﾞｰ', 'aɪ':'ｶﾞｲ', 'aʊ':'ｶﾞｳ', 'eɪ':'ｹﾞｲ', 'oʊ':'ｺﾞｳ', 'ɔɪ':'ｺﾞｲ'},
    'h': {'æ':'ﾊ', 'a':'ﾊ', 'ə':'ﾊ', 'ʌ':'ﾊ', 'e':'ﾍ', 'ɛ':'ﾍ', 'i':'ﾋ', 'ɪ':'ﾋ', 'o':'ﾎ', 'ɔ':'ﾎ', 'u':'ﾌ', 'ʊ':'ﾌ', 'ɚ':'ﾊｰ', 'ɝ':'ﾊｰ', 'aɪ':'ﾊｲ', 'aʊ':'ﾊｳ', 'eɪ':'ﾍｲ', 'oʊ':'ﾎｳ', 'ɔɪ':'ﾎｲ'},
    'k': {'æ':'ｶ', 'a':'ｶ', 'ə':'ｶ', 'ʌ':'ｶ', 'e':'ｹ', 'ɛ':'ｹ', 'i':'ｷ', 'ɪ':'ｷ', 'o':'ｺ', 'ɔ':'ｺ', 'u':'ｸ', 'ʊ':'ｸ', 'ɚ':'ｶｰ', 'ɝ':'ｶｰ', 'aɪ':'ｶｲ', 'aʊ':'ｶｳ', 'eɪ':'ｹｲ', 'oʊ':'ｺｳ', 'ɔɪ':'ｺｲ'},
    'l': {'æ':'ﾗ', 'a':'ﾗ', 'ə':'ﾗ', 'ʌ':'ﾗ', 'e':'ﾚ', 'ɛ':'ﾚ', 'i':'ﾘ', 'ɪ':'ﾘ', 'o':'ﾛ', 'ɔ':'ﾛ', 'u':'ﾙ', 'ʊ':'ﾙ', 'ɚ':'ﾗｰ', 'ɝ':'ﾗｰ', 'aɪ':'ﾗｲ', 'aʊ':'ﾗｳ', 'eɪ':'ﾚｲ', 'oʊ':'ﾛｳ', 'ɔɪ':'ﾛｲ'},
    'm': {'æ':'ﾏ', 'a':'ﾏ', 'ə':'ﾏ', 'ʌ':'ﾏ', 'e':'ﾒ', 'ɛ':'ﾒ', 'i':'ﾐ', 'ɪ':'ﾐ', 'o':'ﾓ', 'ɔ':'ﾓ', 'u':'ﾑ', 'ʊ':'ﾑ', 'ɚ':'ﾏｰ', 'ɝ':'ﾏｰ', 'aɪ':'ﾏｲ', 'aʊ':'ﾏｳ', 'eɪ':'ﾒｲ', 'oʊ':'ﾓｳ', 'ɔɪ':'ﾓｲ'},
    'n': {'æ':'ﾅ', 'a':'ﾅ', 'ə':'ﾅ', 'ʌ':'ﾅ', 'e':'ﾈ', 'ɛ':'ﾈ', 'i':'ﾆ', 'ɪ':'ﾆ', 'o':'ﾉ', 'ɔ':'ﾉ', 'u':'ﾇ', 'ʊ':'ﾇ', 'ɚ':'ﾅｰ', 'ɝ':'ﾅｰ', 'aɪ':'ﾅｲ', 'aʊ':'ﾅｳ', 'eɪ':'ﾈｲ', 'oʊ':'ﾉｳ', 'ɔɪ':'ﾉｲ'},
    'p': {'æ':'ﾊﾟ', 'a':'ﾊﾟ', 'ə':'ﾊﾟ', 'ʌ':'ﾊﾟ', 'e':'ﾍﾟ', 'ɛ':'ﾍﾟ', 'i':'ﾋﾟ', 'ɪ':'ﾋﾟ', 'o':'ﾎﾟ', 'ɔ':'ﾎﾟ', 'u':'ﾌﾟ', 'ʊ':'ﾌﾟ', 'ɚ':'ﾊﾟｰ', 'ɝ':'ﾊﾟｰ', 'aɪ':'ﾊﾟｲ', 'aʊ':'ﾊﾟｳ', 'eɪ':'ﾍﾟｲ', 'oʊ':'ﾎﾟｳ', 'ɔɪ':'ﾎﾟｲ'},
    's': {'æ':'ｻ', 'a':'ｻ', 'ə':'ｻ', 'ʌ':'ｻ', 'e':'ｾ', 'ɛ':'ｾ', 'i':'ｽｨ', 'ɪ':'ｽｨ', 'o':'ｿ', 'ɔ':'ｿ', 'u':'ｽ', 'ʊ':'ｽ', 'ɚ':'ｻｰ', 'ɝ':'ｻｰ', 'aɪ':'ｻｲ', 'aʊ':'ｻｳ', 'eɪ':'ｾｲ', 'oʊ':'ｿｳ', 'ɔɪ':'ｿｲ'},
    't': {'æ':'ﾀ', 'a':'ﾀ', 'ə':'ﾀ', 'ʌ':'ﾀ', 'e':'ﾃ', 'ɛ':'ﾃ', 'i':'ﾃｨ', 'ɪ':'ﾃｨ', 'o':'ﾄ', 'ɔ':'ﾄ', 'u':'ﾄｩ', 'ʊ':'ﾄｩ', 'ɚ':'ﾀｰ', 'ɝ':'ﾀｰ', 'aɪ':'ﾀｲ', 'aʊ':'ﾀｳ', 'eɪ':'ﾃｲ', 'oʊ':'ﾄｳ', 'ɔɪ':'ﾄｲ'},
    'v': {'æ':'ｳﾞｧ', 'a':'ｳﾞｧ', 'ə':'ｳﾞｧ', 'ʌ':'ｳﾞｧ', 'e':'ｳﾞｪ', 'ɛ':'ｳﾞｪ', 'i':'ｳﾞｨ', 'ɪ':'ｳﾞｨ', 'o':'ｳﾞｫ', 'ɔ':'ｳﾞｫ', 'u':'ｳﾞ', 'ʊ':'ｳﾞ', 'ɚ':'ｳﾞｧｰ', 'ɝ':'ｳﾞｧｰ', 'aɪ':'ｳﾞｧｲ', 'aʊ':'ｳﾞｧｳ', 'eɪ':'ｳﾞｪｲ', 'oʊ':'ｳﾞｫｳ', 'ɔɪ':'ｳﾞｫｲ'},
    'w': {'æ':'ﾜ', "ɜ:":"ﾜｰ",'a':'ﾜ', 'ə':'ﾜ', 'ʌ':'ﾜ', 'e':'ｳｪ', 'ɛ':'ｳｪ', 'i':'ｳｨ', 'ɪ':'ｳｨ', 'o':'ｳｫ', 'ɔ':'ｳｫ', 'u':'ｳ', 'ʊ':'ｳ', 'ɚ':'ﾜｰ', 'ɝ':'ﾜｰ', 'aɪ':'ﾜｲ', 'aʊ':'ﾜｳ', 'eɪ':'ｳｪｲ', 'oʊ':'ｳｫｳ', 'ɔɪ':'ｳｫｲ'},
    'j': {'æ':'ﾔ', 'a':'ﾔ', 'ə':'ﾔ', 'ʌ':'ﾔ', 'e':'ｲｪ', 'ɛ':'ｲｪ', 'i':'ｲ', 'ɪ':'ｲ', 'o':'ﾖ', 'ɔ':'ﾖ', 'u':'ﾕ', 'ʊ':'ﾕ', 'ɚ':'ﾔｰ', 'ɝ':'ﾔｰ', 'aɪ':'ﾔｲ', 'aʊ':'ﾔｳ', 'eɪ':'ｲｪｲ', 'oʊ':'ﾖｳ', 'ɔɪ':'ﾖｲ'},
    'z': {'æ':'ｻﾞ', 'a':'ｻﾞ', 'ə':'ｻﾞ', 'ʌ':'ｻﾞ', 'e':'ｾﾞ', 'ɛ':'ｾﾞ', 'i':'ｽﾞｨ', 'ɪ':'ｽﾞｨ', 'o':'ｿﾞ', 'ɔ':'ｿﾞ', 'u':'ｽﾞ', 'ʊ':'ｽﾞ', 'ɚ':'ｻﾞｰ', 'ɝ':'ｻﾞｰ', 'aɪ':'ｻﾞｲ', 'aʊ':'ｻﾞｳ', 'eɪ':'ｾﾞｲ', 'oʊ':'ｿﾞｳ', 'ɔɪ':'ｿﾞｲ'},
    'ʃ': {'æ':'ｼｬ', 'a':'ｼｬ', 'ə':'ｼｬ', 'ʌ':'ｼｬ', 'e':'ｼｪ', 'ɛ':'ｼｪ', 'i':'ｼ', 'ɪ':'ｼ', 'o':'ｼｮ', 'ɔ':'ｼｮ', 'u':'ｼｭ', 'ʊ':'ｼｭ', 'ɚ':'ｼｬｰ', 'ɝ':'ｼｬｰ', 'aɪ':'ｼｬｲ', 'aʊ':'ｼｬｳ', 'eɪ':'ｼｪｲ', 'oʊ':'ｼｮｳ', 'ɔɪ':'ｼｮｲ'},
    'tʃ': {'æ':'ﾁｬ', 'a':'ﾁｬ', 'ə':'ﾁｬ', 'ʌ':'ﾁｬ', 'e':'ﾁｪ', 'ɛ':'ﾁｪ', 'i':'ﾁ', 'ɪ':'ﾁ', 'o':'ﾁｮ', 'ɔ':'ﾁｮ', 'u':'ﾁｭ', 'ʊ':'ﾁｭ', 'ɚ':'ﾁｬｰ', 'ɝ':'ﾁｬｰ', 'aɪ':'ﾁｬｲ', 'aʊ':'ﾁｬｳ', 'eɪ':'ﾁｪｲ', 'oʊ':'ﾁｮｳ', 'ɔɪ':'ﾁｮｲ'},
    'dʒ': {'æ':'ｼﾞｬ', 'a':'ｼﾞｬ', 'ə':'ｼﾞｬ', 'ʌ':'ｼﾞｬ', 'e':'ｼﾞｪ', 'ɛ':'ｼﾞｪ', 'i':'ｼﾞ', 'ɪ':'ｼﾞ', 'o':'ｼﾞｮ', 'ɔ':'ｼﾞｮ', 'u':'ｼﾞｭ', 'ʊ':'ｼﾞｭ', 'ɚ':'ｼﾞｬｰ', 'ɝ':'ｼﾞｬｰ', 'aɪ':'ｼﾞｬｲ', 'aʊ':'ｼﾞｬｳ', 'eɪ':'ｼﾞｪｲ', 'oʊ':'ｼﾞｮｳ', 'ɔɪ':'ｼﾞｮｲ'},
    'ʒ': {'æ':'ｼﾞｬ', 'a':'ｼﾞｬ', 'ə':'ｼﾞｬ', 'ʌ':'ｼﾞｬ', 'e':'ｼﾞｪ', 'ɛ':'ｼﾞｪ', 'i':'ｼﾞ', 'ɪ':'ｼﾞ', 'o':'ｼﾞｮ', 'ɔ':'ｼﾞｮ', 'u':'ｼﾞｭ', 'ʊ':'ｼﾞｭ', 'ɚ':'ｼﾞｬｰ', 'ɝ':'ｼﾞｬｰ', 'aɪ':'ｼﾞｬｲ', 'aʊ':'ｼﾞｬｳ', 'eɪ':'ｼﾞｪｲ', 'oʊ':'ｼﾞｮｳ', 'ɔɪ':'ｼﾞｮｲ'},
    'ɹ': {'æ':'ﾗ', 'a':'ﾗ', 'ə':'ﾗ', 'ʌ':'ﾗ', 'e':'ﾚ', 'ɛ':'ﾚ', 'i':'ﾘ', 'ɪ':'ﾘ', 'o':'ﾛ', 'ɔ':'ﾛ', 'u':'ﾙ', 'ʊ':'ﾙ', 'ɚ':'ﾗｰ', 'ɝ':'ﾗｰ', 'aɪ':'ﾗｲ', 'aʊ':'ﾗｳ', 'eɪ':'ﾚｲ', 'oʊ':'ﾛｳ', 'ɔɪ':'ﾛｲ'},
    'θ': {'æ':'ｻ', 'a':'ｻ', 'ə':'ｻ', 'ʌ':'ｻ', 'e':'ｾ', 'ɛ':'ｾ', 'i':'ｽｨ', 'ɪ':'ｽｨ', 'o':'ｿ', 'ɔ':'ｿ', 'u':'ｽ', 'ʊ':'ｽ', 'ɚ':'ｻｰ', 'ɝ':'ｻｰ', 'aɪ':'ｻｲ', 'aʊ':'ｻｳ', 'eɪ':'ｾｲ', 'oʊ':'ｿｳ', 'ɔɪ':'ｿｲ'},
    'ð': {'æ':'ｻﾞ', 'a':'ｻﾞ', 'ə':'ｻﾞ', 'ʌ':'ｻﾞ', 'e':'ｾﾞ', 'ɛ':'ｾﾞ', 'i':'ｽﾞｨ', 'ɪ':'ｽﾞｨ', 'o':'ｿﾞ', 'ɔ':'ｿﾞ', 'u':'ｽﾞ', 'ʊ':'ｽﾞ', 'ɚ':'ｻﾞｰ', 'ɝ':'ｻﾞｰ', 'aɪ':'ｻﾞｲ', 'aʊ':'ｻﾞｳ', 'eɪ':'ｾﾞｲ', 'oʊ':'ｿﾞｳ', 'ɔɪ':'ｿﾞｲ'},
}
DIPHTHONGS = {
    'aɪ': 'ｱｲ', 'aʊ': 'ｱｳ', 'eɪ': 'ｴｲ', 'oʊ': 'ｵｳ', 'ɔɪ': 'ｵｲ'
}

all_phonemes = list(DIPHTHONGS.keys()) + list(CONSONANTS.keys()) + list(VOWELS.keys()) + [':']
unique_phonemes = sorted(list(set(all_phonemes)), key=len, reverse=True)
phoneme_pattern = re.compile('|'.join(re.escape(p) for p in unique_phonemes))

def to_full_width(text: str) -> str:
    """半角カタカナを全角カタカナに変換する"""
    return text.translate(str.maketrans(
        "ｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝﾞﾟ",
        "ァィゥェォャュョッーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン゛゜"
    ))

def english_to_katakana(text: str) -> str:
    ansewr=[]
    ans = {}
    text_split = text.strip().split("\n")
    
    for t in text_split:
        if not t.strip():
            continue

        ipa = phonemize(
            t, language='en-us', backend='espeak', strip=True,
            preserve_punctuation=True, separator=Separator(word='|', phone='')
        )
        words_ipa = ipa.split('|')
        print(words_ipa)
        katakana_words = []
        for word_ipa in words_ipa:
            word_ipa = word_ipa.strip()
            if not word_ipa:
                continue

            phonemes = phoneme_pattern.findall(word_ipa)
            print(phonemes)
            katakana = ""
            i = 0
            while i < len(phonemes):
                p = phonemes[i]
                is_combination = False

                if (p in COMBINATIONS and i + 2 < len(phonemes) and
                    phonemes[i+1] == 'j' and phonemes[i+2] in VOWELS):
                    vowel_char = VOWELS[phonemes[i+2]][0]
                    if vowel_char == 'ｱ': katakana += COMBINATIONS[p]['i'] + 'ｬ'
                    elif vowel_char == 'ｳ': katakana += COMBINATIONS[p]['i'] + 'ｭ'
                    elif vowel_char == 'ｵ': katakana += COMBINATIONS[p]['i'] + 'ｮ'
                    else: katakana += COMBINATIONS[p]['i']
                    i += 3
                    is_combination = True
                elif p in COMBINATIONS and i + 1 < len(phonemes):
                    next_p = phonemes[i+1]
                    if next_p in VOWELS:
                        vowel_char = VOWELS[next_p][0]
                        if p == 's' and vowel_char == 'ｲ': katakana += 'ｼ'
                        elif p == 'z' and vowel_char == 'ｲ': katakana += 'ｼﾞ'
                        else:
                            lookup_key = KANA_VOWEL_MAP.get(vowel_char)
                            if lookup_key: katakana += COMBINATIONS[p][lookup_key]
                        i += 2
                        is_combination = True
                    elif next_p in DIPHTHONGS:
                        diph_kana = DIPHTHONGS[next_p]
                        first_vowel_char = diph_kana[0]
                        lookup_key = KANA_VOWEL_MAP.get(first_vowel_char)
                        if lookup_key:
                            katakana += COMBINATIONS[p][lookup_key] + diph_kana[1:]
                        i += 2
                        is_combination = True

                if is_combination:
                    continue

                if p == ':':
                    if katakana: katakana += 'ー'
                elif p in DIPHTHONGS:
                    katakana += DIPHTHONGS[p]
                elif p in VOWELS:
                    katakana += VOWELS[p]
                elif p in CONSONANTS:
                    # --- 【ロジック修正箇所】 ---
                    is_last_sound = (i == len(phonemes) - 1)
                    
                    # 例外: 'p', 't', 'k' が単語の末尾にある場合のみ 'ッ' にする
                    if p in ('p', 't', 'k') and is_last_sound:
                        katakana += 'ｯ'
                    # 例外: 'tʃ' が単語の末尾にある場合は 'ッチ'
                    elif p == 'tʃ' and is_last_sound:
                         katakana += 'ｯﾁ'
                    # 原則: それ以外の子音は、辞書の定義通りに変換する
                    else:
                        katakana += CONSONANTS[p]
                
                i += 1
            katakana_words.append(katakana)
        
        katakana_english = ' '.join(katakana_words)
        ansewr.append({"original":t,"convert":katakana_english})
    
    return ansewr

# --- 実行 ---
if __name__ == '__main__':
    test_case = "thank you very \n hello"
    print(f"--- Original ---\n{test_case}")
    katakana_json = english_to_katakana(test_case)
    print(f"--- Katakana (JSON) ---\n{katakana_json}")
    print("-" * 20)

